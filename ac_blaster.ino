#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>
#include "EspMQTTClient.h"

EspMQTTClient client(
  "",  //wifi ssid
  "",  //wifi password
  "",  // MQTT Broker server ip
  "",   // MQTTUsername
  "",   // MQTTPassword
  "",      // Client name
   // MQTT port
);

const uint16_t kIrLed = D2;

const uint16_t kHz = 38; //From AC.ir
IRsend irsend(kIrLed); 

uint16_t acOn[211] = {3834, 1874, 484, 426, 513, 1395, 483, 455, 484, 1396, 484, 
                      455, 484, 1396, 484, 457, 484, 1396, 484, 455, 484, 1395, 
                      484, 455, 485, 1394, 484, 1396, 483, 457, 483, 1395, 483, 
                      456, 484, 1395, 484, 1396, 485, 1394, 485, 1394, 486, 454, 
                      486, 453, 486, 1394, 485, 1394, 485, 455, 509, 430, 509, 
                      430, 509, 429, 509, 1371, 509, 431, 509, 432, 507, 432, 
                      507, 1374, 506, 434, 506, 434, 506, 432, 506, 433, 506, 
                      433, 505, 434, 506, 433, 505, 1374, 505, 434, 505, 433, 
                      506, 433, 505, 1398, 481, 435, 505, 459, 481, 435, 505, 
                      458, 481, 1399, 481, 459, 481, 459, 481, 458, 482, 1400, 
                      480, 459, 481, 459, 481, 458, 481, 459, 481, 459, 481, 459, 
                      481, 459, 481, 459, 481, 457, 481, 458, 481, 459, 481, 459, 
                      481, 458, 481, 1399, 480, 459, 481, 459, 481, 459, 481, 459, 
                      481, 460, 480, 458, 481, 459, 481, 459, 481, 459, 481, 460, 
                      480, 458, 481, 1400, 480, 459, 480, 459, 481, 459, 481, 458, 
                      480, 459, 481, 460, 480, 460, 480, 459, 481, 459, 481, 460, 
                      480, 458, 480, 460, 481, 1399, 481, 1400, 481, 1401, 480, 1398, 
                      480, 1400, 481, 460, 480, 459, 481, 460, 480, 459, 480, 1400, 
                      481, 459, 480, 459, 480};

uint16_t acOff[211] = {3837, 1875, 484, 454, 485, 1365, 515, 426, 513, 1366, 514, 
                      456, 485, 1392, 485, 455, 485, 1394, 485, 454, 485, 1395, 
                      485, 455, 484, 1396, 485, 1393, 485, 455, 485, 1393, 486, 
                      453, 485, 1391, 486, 1393, 511, 1367, 511, 1368, 510, 428, 
                      510, 429, 509, 1369, 508, 1371, 507, 432, 507, 433, 506, 433, 
                      507, 433, 505, 1374, 505, 433, 507, 433, 506, 432, 507, 1374, 
                      506, 434, 506, 434, 506, 434, 506, 432, 506, 433, 506, 433, 
                      507, 434, 506, 1372, 506, 433, 506, 434, 506, 433, 507, 432, 
                      506, 1372, 505, 433, 506, 433, 506, 432, 506, 1373, 506, 433, 
                      506, 433, 506, 433, 506, 1375, 505, 433, 507, 433, 506, 433, 
                      507, 432, 506, 433, 506, 433, 506, 434, 506, 434, 506, 434, 
                      506, 432, 507, 434, 505, 434, 506, 433, 506, 1375, 505, 434, 
                      506, 434, 506, 434, 506, 434, 505, 434, 505, 432, 506, 434, 
                      506, 435, 505, 434, 505, 434, 506, 434, 505, 1375, 505, 434, 
                      505, 434, 505, 435, 504, 433, 505, 459, 481, 436, 504, 436, 
                      504, 459, 481, 460, 480, 459, 480, 458, 480, 460, 480, 1399, 
                      480, 1399, 480, 1400, 479, 1398, 479, 1400, 480, 460, 480, 
                      460, 480, 459, 480, 1399, 480, 459, 480, 460, 480, 460, 479};

uint16_t acMegaCool[211] = {3831, 1843, 514, 426, 513, 1392, 484, 456, 484, 1394, 
                            484, 454, 485, 1395, 484, 455, 484, 1395, 484, 454, 485, 
                            1396, 484, 456, 484, 1393, 485, 1395, 485, 454, 483, 
                            1394, 483, 455, 483, 1397, 483, 1395, 484, 1394, 485, 
                            1394, 485, 454, 485, 453, 485, 1394, 485, 1393, 485, 
                            453, 485, 453, 485, 455, 510, 431, 509, 1368, 510, 431, 
                            508, 431, 508, 432, 508, 1370, 507, 433, 506, 458, 481, 
                            458, 481, 458, 482, 458, 481, 457, 481, 459, 481, 1399, 
                            481, 458, 481, 457, 481, 459, 481, 459, 482, 1398, 481, 
                            1399, 481, 458, 481, 458, 481, 1398, 481, 458, 481, 459, 
                            481, 458, 480, 1398, 480, 458, 481, 458, 481, 457, 481, 
                            458, 481, 459, 481, 459, 481, 459, 481, 459, 481, 457, 
                            482, 459, 481, 459, 481, 459, 480, 458, 481, 1399, 481, 
                            459, 481, 459, 481, 459, 481, 459, 481, 458, 481, 457, 
                            481, 459, 480, 458, 481, 458, 481, 459, 481, 458, 481, 
                            1400, 480, 1398, 481, 459, 480, 459, 480, 459, 481, 459, 
                            481, 459, 481, 457, 481, 459, 481, 459, 481, 459, 481, 
                            459, 481, 458, 481, 1400, 481, 1399, 481, 1399, 481, 
                            1400, 480, 1399, 480, 458, 480, 459, 481, 459, 481, 459, 
                            481, 459, 480, 1398, 480, 458, 481};

void setup() {
  irsend.begin();
#if ESP8266
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
#else  // ESP8266
  Serial.begin(115200, SERIAL_8N1);
#endif  // ESP8266

  Serial.println("setup done");
}


void onConnectionEstablished() {
  client.subscribe("ac/on", [] (const String &payload)  {
    irsend.sendRaw(acOn, 211, kHz);
    delay(2000);
    irsend.sendRaw(acMegaCool, 211, kHz);
  });

  client.subscribe("ac/off", [] (const String &payload)  {
    irsend.sendRaw(acOff, 211, kHz);
  });
}


void loop() {
  client.loop();
}